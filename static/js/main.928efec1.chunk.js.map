{"version":3,"sources":["store/actions/action-types.js","Components/control.js","Components/Count.js","Components/App.js","serviceWorker.js","store/reducers/root.js","store/index.js","index.js"],"names":["add","sub","connect","dispatch","type","props","react_default","a","createElement","className","onClick","state","count","control","App","Components_Count","Component","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAAaA,EAAM,MACNC,EAAM,MCoBJC,kBAAQ,KAPvB,SAA4BC,GAC1B,MAAO,CACLH,IAAK,kBAAMG,EAAS,CAAEC,KAAMJ,KAC5BC,IAAK,kBAAME,EAAS,CAAEC,KAAMH,OAIjBC,CAhBC,SAAAG,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAAU,kBAAML,EAAML,QAA/D,SACAM,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsBC,QAAU,kBAAML,EAAMJ,QAA9D,YCaSC,kBAPf,SAAyBS,GACxB,MAAO,CACNC,MAAOD,EAAMC,QAKAV,CAjBD,SAAAG,GACb,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,IAA4BJ,EAAMO,MAAlC,KACGN,EAAAC,EAAAC,cAACK,EAAD,SCGSC,0LAPb,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACO,EAAD,cAJcC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEChBAC,EAAe,CACpBV,MAAO,GAoBOW,EAjBK,WAAkC,IAAjCZ,EAAiCa,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAC5B,QADqDE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACtCtB,MAEd,KAAKJ,EACJ,MAAO,CACNY,MAAOD,EAAMC,MAAQ,GAGvB,KAAKX,EACJ,MAAO,CACNW,MAAOD,EAAMC,MAAQ,GAGvB,QAAS,OAAOD,ICbHgB,EAHDC,YAAaL,EAAaL,OAAOW,8BAAgCX,OAAOW,gCCMtFC,IAASC,OACRzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUL,MAAQA,GACjBrB,EAAAC,EAAAC,cAACyB,EAAD,OAEDC,SAASC,eAAe,SHoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.928efec1.chunk.js","sourcesContent":["export const add = \"ADD\";\r\nexport const sub = \"SUB\";","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { add, sub } from '../store/actions/action-types';\r\n\r\nconst Control = props => {\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-success px-5\" onClick={ () => props.add() }>+ ADD</button>\r\n      <button className=\"btn btn-danger px-5\" onClick={ () => props.sub() }>- SUB</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    add: () => dispatch({ type: add }),\r\n    sub: () => dispatch({ type: sub })\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Control)","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Control from './control'\r\n\r\nconst Count = props => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>I am Counter</h1>\r\n\t\t\t<p className=\"display-4\"> { props.count } </p>\r\n      <Control />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tcount: state.count\r\n\t};\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Count)","import React, { Component } from \"react\";\nimport Count from './Count'\nimport \"./App.css\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Count />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {add, sub} from '../actions/action-types';\r\n\r\nconst initialState = {\r\n\tcount: 0,\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase add :\r\n\t\t\treturn {\r\n\t\t\t\tcount: state.count + 1\r\n\t\t\t};\r\n\r\n\t\tcase sub :\r\n\t\t\treturn {\r\n\t\t\t\tcount: state.count - 1\r\n\t\t\t};\r\n\r\n\t\tdefault: return state;\r\n\t}\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux'\r\nimport rootReducer from './reducers/root'\r\n\r\nconst store = createStore( rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() )\r\n\r\n\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from './store' // index.js\n\nReactDOM.render(\n\t<Provider store={ store }>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}